package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"
	"gymboss/graph/model"
)

// CreateTraining is the resolver for the createTraining field.
func (r *mutationResolver) CreateTraining(ctx context.Context, training model.TrainingCreate) (*model.Training, error) {
	panic(fmt.Errorf("not implemented: CreateTraining - createTraining"))
}

// UpdateTraining is the resolver for the updateTraining field.
func (r *mutationResolver) UpdateTraining(ctx context.Context, training model.TrainingUpdate) (*model.Training, error) {
	panic(fmt.Errorf("not implemented: UpdateTraining - updateTraining"))
}

// DeleteTraining is the resolver for the deleteTraining field.
func (r *mutationResolver) DeleteTraining(ctx context.Context, id string) (*model.Training, error) {
	panic(fmt.Errorf("not implemented: DeleteTraining - deleteTraining"))
}

// CreateGym is the resolver for the createGym field.
func (r *mutationResolver) CreateGym(ctx context.Context, gym model.GymCreate) (*model.Gym, error) {
	panic(fmt.Errorf("not implemented: CreateGym - createGym"))
}

// UpdateGym is the resolver for the updateGym field.
func (r *mutationResolver) UpdateGym(ctx context.Context, gym model.GymUpdate) (*model.Gym, error) {
	panic(fmt.Errorf("not implemented: UpdateGym - updateGym"))
}

// DeleteGym is the resolver for the deleteGym field.
func (r *mutationResolver) DeleteGym(ctx context.Context, id string) (*model.Gym, error) {
	panic(fmt.Errorf("not implemented: DeleteGym - deleteGym"))
}

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, customer model.CustomerCreate) (*model.Customer, error) {
	panic(fmt.Errorf("not implemented: CreateCustomer - createCustomer"))
}

// UpdateCustomer is the resolver for the updateCustomer field.
func (r *mutationResolver) UpdateCustomer(ctx context.Context, customer model.CustomerUpdate) (*model.Customer, error) {
	panic(fmt.Errorf("not implemented: UpdateCustomer - updateCustomer"))
}

// DeleteCustomer is the resolver for the deleteCustomer field.
func (r *mutationResolver) DeleteCustomer(ctx context.Context, id string) (*model.Customer, error) {
	panic(fmt.Errorf("not implemented: DeleteCustomer - deleteCustomer"))
}

// CreatePurchase is the resolver for the createPurchase field.
func (r *mutationResolver) CreatePurchase(ctx context.Context, purchase model.PurchaseCreate) (*model.Purchase, error) {
	panic(fmt.Errorf("not implemented: CreatePurchase - createPurchase"))
}

// UpdatePurchase is the resolver for the updatePurchase field.
func (r *mutationResolver) UpdatePurchase(ctx context.Context, purchase model.PurchaseUpdate) (*model.Purchase, error) {
	panic(fmt.Errorf("not implemented: UpdatePurchase - updatePurchase"))
}

// DeletePurchase is the resolver for the deletePurchase field.
func (r *mutationResolver) DeletePurchase(ctx context.Context, id string) (*model.Purchase, error) {
	panic(fmt.Errorf("not implemented: DeletePurchase - deletePurchase"))
}

// PurchaseTraining is the resolver for the purchaseTraining field.
func (r *mutationResolver) PurchaseTraining(ctx context.Context, trainingID string) (*model.Purchase, error) {
	panic(fmt.Errorf("not implemented: PurchaseTraining - purchaseTraining"))
}

// Trainings is the resolver for the trainings field.
func (r *queryResolver) Trainings(ctx context.Context) ([]*model.Training, error) {
	panic(fmt.Errorf("not implemented: Trainings - trainings"))
}

// ReadTraining is the resolver for the readTraining field.
func (r *queryResolver) ReadTraining(ctx context.Context, id string) (*model.Training, error) {
	panic(fmt.Errorf("not implemented: ReadTraining - readTraining"))
}

// Gyms is the resolver for the gyms field.
func (r *queryResolver) Gyms(ctx context.Context) ([]*model.Gym, error) {
	panic(fmt.Errorf("not implemented: Gyms - gyms"))
}

// ReadGym is the resolver for the readGym field.
func (r *queryResolver) ReadGym(ctx context.Context, id string) (*model.Gym, error) {
	panic(fmt.Errorf("not implemented: ReadGym - readGym"))
}

// ReadCustomer is the resolver for the readCustomer field.
func (r *queryResolver) ReadCustomer(ctx context.Context, id string) (*model.Customer, error) {
	panic(fmt.Errorf("not implemented: ReadCustomer - readCustomer"))
}

// Purchases is the resolver for the purchases field.
func (r *queryResolver) Purchases(ctx context.Context, customerID string) ([]*model.Purchase, error) {
	panic(fmt.Errorf("not implemented: Purchases - purchases"))
}

// ReadPurchase is the resolver for the readPurchase field.
func (r *queryResolver) ReadPurchase(ctx context.Context, id string) (*model.Purchase, error) {
	panic(fmt.Errorf("not implemented: ReadPurchase - readPurchase"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
